{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"running\";\n        this.spawnTile();\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    spawnTile() {\n        const emptyCells = [];\n        this.board.forEach((row, rIndex)=>{\n            row.forEach((cell, cIndex)=>{\n                if (cell === 0) emptyCells.push([\n                    rIndex,\n                    cIndex\n                ]);\n            });\n        });\n        if (emptyCells.length === 0) return;\n        const [rowIndex, colIndex] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n    }\n    moveLeft() {\n        let moved = false;\n        for (const row of this.board){\n            const originalRow = [\n                ...row\n            ];\n            this.merge(row);\n            if (this.hasChanged(originalRow, row)) moved = true;\n        }\n        if (moved) {\n            this.spawnTile();\n            this.checkGameStatus();\n        }\n    }\n    moveRight() {\n        this.board.forEach((row)=>row.reverse());\n        this.moveLeft();\n        this.board.forEach((row)=>row.reverse());\n    }\n    moveUp() {\n        this.transpose();\n        this.moveLeft();\n        this.transpose();\n    }\n    moveDown() {\n        this.transpose();\n        this.moveRight();\n        this.transpose();\n    }\n    transpose() {\n        this.board = this.board[0].map((_, colIndex)=>{\n            return this.board.map((row)=>row[colIndex]);\n        });\n    }\n    merge(row) {\n        for(let i = 0; i < 4; i++){\n            if (row[i] === 0) continue;\n            let next = i + 1;\n            while(next < 4 && row[next] === 0)next++;\n            if (next < 4 && row[i] === row[next]) {\n                row[i] *= 2;\n                this.score += row[i];\n                row[next] = 0;\n            }\n        }\n        const newRow = row.filter((cell)=>cell !== 0);\n        while(newRow.length < 4)newRow.push(0);\n        for(let i = 0; i < 4; i++)row[i] = newRow[i];\n    }\n    hasChanged(original, current) {\n        return JSON.stringify(original) !== JSON.stringify(current);\n    }\n    checkGameStatus() {\n        if (this.board.flat().includes(2048)) this.status = \"won\";\n        else if (!this.board.flat().includes(0) && this.noValidMoves()) this.status = \"lost\";\n    }\n    noValidMoves() {\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.board[r][c] === 0) return false;\n            if (c < 3 && this.board[r][c] === this.board[r][c + 1]) return false;\n            if (r < 3 && this.board[r][c] === this.board[r + 1][c]) return false;\n        }\n        return true;\n    }\n    start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"running\";\n        this.spawnTile();\n        this.spawnTile();\n    }\n    restart() {\n        this.start();\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$scoreDisplay = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nfunction $09e991522ca7e64e$var$render() {\n    const cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach((cell, index)=>{\n        const value = $09e991522ca7e64e$var$game.getState()[Math.floor(index / 4)][index % 4];\n        cell.className = \"field-cell\" + (value ? ` field-cell--${value}` : \"\");\n        cell.textContent = value || \"\";\n    });\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"won\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lost\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"running\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$render();\n\n\n//# sourceMappingURL=index.80e67f4c.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\nconst scoreDisplay = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst startButton = document.querySelector('.start');\n\nfunction render() {\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const value = game.getState()[Math.floor(index / 4)][index % 4];\n\n    cell.className = 'field-cell' + (value ? ` field-cell--${value}` : '');\n    cell.textContent = value || '';\n  });\n  scoreDisplay.textContent = game.getScore();\n\n  if (game.getStatus() === 'won') {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === 'lost') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'running') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n  render();\n});\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  messageStart.classList.add('hidden');\n  startButton.textContent = 'Restart';\n  render();\n});\n\nrender();\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'running';\n    this.spawnTile();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  spawnTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rIndex) => {\n      row.forEach((cell, cIndex) => {\n        if (cell === 0) {\n          emptyCells.push([rIndex, cIndex]);\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [rowIndex, colIndex] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (const row of this.board) {\n      const originalRow = [...row];\n\n      this.merge(row);\n\n      if (this.hasChanged(originalRow, row)) {\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.spawnTile();\n      this.checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    this.board.forEach((row) => row.reverse());\n    this.moveLeft();\n    this.board.forEach((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.transpose();\n    this.moveLeft();\n    this.transpose();\n  }\n\n  moveDown() {\n    this.transpose();\n    this.moveRight();\n    this.transpose();\n  }\n\n  transpose() {\n    this.board = this.board[0].map((_, colIndex) => {\n      return this.board.map((row) => row[colIndex]);\n    });\n  }\n\n  merge(row) {\n    for (let i = 0; i < 4; i++) {\n      if (row[i] === 0) {\n        continue;\n      }\n\n      let next = i + 1;\n\n      while (next < 4 && row[next] === 0) {\n        next++;\n      }\n\n      if (next < 4 && row[i] === row[next]) {\n        row[i] *= 2;\n        this.score += row[i];\n        row[next] = 0;\n      }\n    }\n\n    const newRow = row.filter((cell) => cell !== 0);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    for (let i = 0; i < 4; i++) {\n      row[i] = newRow[i];\n    }\n  }\n\n  hasChanged(original, current) {\n    return JSON.stringify(original) !== JSON.stringify(current);\n  }\n\n  checkGameStatus() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'won';\n    } else if (!this.board.flat().includes(0) && this.noValidMoves()) {\n      this.status = 'lost';\n    }\n  }\n\n  noValidMoves() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          return false;\n        }\n\n        if (c < 3 && this.board[r][c] === this.board[r][c + 1]) {\n          return false;\n        }\n\n        if (r < 3 && this.board[r][c] === this.board[r + 1][c]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'running';\n    this.spawnTile();\n    this.spawnTile();\n  }\n\n  restart() {\n    this.start();\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","createEmptyBoard","score","status","spawnTile","Array","from","length","fill","getState","getScore","getStatus","emptyCells","forEach","row","rIndex","cell","cIndex","push","rowIndex","colIndex","Math","floor","random","moveLeft","moved","originalRow","merge","hasChanged","checkGameStatus","moveRight","reverse","moveUp","transpose","moveDown","map","_","i","next","newRow","filter","original","current","JSON","stringify","flat","includes","noValidMoves","r","c","start","restart","$09e991522ca7e64e$var$scoreDisplay","document","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$render","cells","querySelectorAll","index","value","className","textContent","classList","remove","addEventListener","e","key","add"],"version":3,"file":"index.80e67f4c.js.map"}